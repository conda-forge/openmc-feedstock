{% set org = "openmc-dev" %}
{% set name = "openmc" %}
{% set version = "0.15.0" %}
{% set sha256 = "32517c1af1abee615e0b49330fd6eb6d704dd96d903b5b415091aea8aa52bbf0" %}
{% set build = 0 %}

# ensure dagmc is defined (needed for conda-smithy recipe-lint)
{% set dagmc = dagmc or 'nodagmc' %}
{% if dagmc == 'dagmc' %}

# prioritize dagmc variant via build number
{% set build = build + 100 %}
{% endif %}

# define mpi
{% set mpi = mpi or 'nompi' %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  - url: https://github.com/{{ org }}/{{ name }}/archive/v{{ version }}.tar.gz
    fn: {{ name }}-{{ version }}.tar.gz
    sha256: {{ sha256 }}
  - url: https://github.com/zeux/pugixml/archive/41b6ff21c455865bb8ef67c5952b7f895b62bacc.tar.gz
    sha256: b145725a8eb17081783d3e0b7118ec825140f8972da5ab5e15c1d051810c1a93
    folder: vendor/pugixml
  - url: https://github.com/martinmoene/gsl-lite/archive/913e86d49c6a1acca980f4e325378f9dc393493a.tar.gz
    sha256: 1978f9c6a6c3fffebac174c34d907ad145a5805e01f94b2de433aa5b0e6efdf4
    folder: vendor/gsl-lite
  - url: https://github.com/xtensor-stack/xtensor/archive/0.25.0.tar.gz
    sha256: 32d5d9fd23998c57e746c375a544edf544b74f0a18ad6bc3c38cbba968d5e6c7
    folder: vendor/xtensor
  - url: https://github.com/xtensor-stack/xtl/archive/0.7.7.tar.gz
    sha256: 44fb99fbf5e56af5c43619fc8c29aa58e5fad18f3ba6e7d9c55c111b62df1fbb
    folder: vendor/xtl
  - url: https://github.com/fmtlib/fmt/archive/d141cdbeb0fb422a3fb7173b285fd38e0d1772dc.tar.gz
    sha256: 8d2cb0daccef71cbf3ee8068a845fdd379545acd289873e67c41fdc1b530bfcd
    folder: vendor/fmt
  - url: https://github.com/catchorg/Catch2/archive/5a40b2275caa05cf809bf04df848764a9d7df2e2.tar.gz
    sha256: be038aac877893ea0fa02cdb5f24a46db03085b7f053c8b78ef7bd437c8c6c22
    folder: vendor/Catch2

build:
  number: {{ build }}
  skip: true  # [win]
  skip: true  # [py<310]
  detect_binary_files_with_prefix: true
  {% if mpi != 'nompi' %}
  {% set mpi_prefix = "mpi_" + mpi %}
  {% else %}
  {% set mpi_prefix = "nompi" %}
  {% endif %}

  # add build string so packages can depend on
  # dagmc or nodagmc variants explicitly:
  # `openmc * nodagmc_*` for openmc without dagmc
  # `openmc * dagmc_*` for openmc with dagmc
  # mpi or nompi variants explicitly:
  # `openmc * mpi_mpich_*` for mpich
  # `openmc * mpi_*` for any mpi
  # `openmc * nompi_*` for no mpi

  string: {{ dagmc }}_{{ mpi_prefix }}_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ build }}

requirements:
  build:
    - cmake
    - make
    - dagmc 3.2.3 {{ mpi_prefix }}_*  # [dagmc == 'dagmc']
    - pkg-config
    - {{ compiler('c') }}
    - {{ stdlib("c") }}
    - {{ compiler('cxx') }}
    - {{ mpi }}  # [mpi != 'nompi']
    - libgomp    # [linux]
  host:
    - dagmc 3.2.3 {{ mpi_prefix }}_*  # [dagmc == 'dagmc']
    - hdf5
    - hdf5 * {{ mpi_prefix }}_*
    - libpng
    - git
    - setuptools
    - pip
    - numpy
    - cython
    - matplotlib-base
    - h5py * {{ mpi_prefix }}_*
    - python
    - {{ mpi }}  # [mpi != 'nompi']
  run:
    - dagmc 3.2.3 {{ mpi_prefix }}_*  # [dagmc == 'dagmc']
    - hdf5
    - hdf5 * {{ mpi_prefix }}_*
    - libpng
    - python
    - h5py * {{ mpi_prefix }}_*
    - scipy
    - pandas
    - matplotlib-base
    - lxml
    - uncertainties
    - setuptools
    - {{ mpi }}  # [mpi != 'nompi']
    - openssh  # [mpi == 'openmpi']
    - ipython
    - njoy2016

test:
  commands:
    - test -f "${PREFIX}/bin/openmc"
    - openmc --version
    - pip check
  imports:
    - openmc
    - openmc.data
    - openmc.deplete
    - openmc.lib
  requires:
    - pip


about:
  home: https://openmc.org
  license: MIT
  license_file: LICENSE
  summary: OpenMC Monte Carlo Code
  description: |
    OpenMC is a community-developed Monte Carlo neutron and photon transport
    simulation code. It is capable of performing fixed source, k-eigenvalue, and
    subcritical multiplication calculations on models built using either a
    constructive solid geometry or CAD representation. OpenMC supports both
    continuous-energy and multigroup transport. The continuous-energy particle
    interaction data is based on a native HDF5 format that can be generated from
    ACE files produced by NJOY. Parallelism is enabled via a hybrid MPI and
    OpenMP programming model.
  doc_url: https://docs.openmc.org
  dev_url: https://github.com/openmc-dev/openmc

extra:
  recipe-maintainers:
    - scopatz
    - paulromano
    - shimwell
    - kkiesling
